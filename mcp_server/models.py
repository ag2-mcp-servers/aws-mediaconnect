# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:36:23+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint


class AddFlowOutputs420Exception(RootModel[Any]):
    root: Any


class Algorithm(Enum):
    aes128 = 'aes128'
    aes192 = 'aes192'
    aes256 = 'aes256'


class BadRequestException(RootModel[Any]):
    root: Any


class BridgePlacement(Enum):
    AVAILABLE = 'AVAILABLE'
    LOCKED = 'LOCKED'


class BridgeState(Enum):
    CREATING = 'CREATING'
    STANDBY = 'STANDBY'
    STARTING = 'STARTING'
    DEPLOYING = 'DEPLOYING'
    ACTIVE = 'ACTIVE'
    STOPPING = 'STOPPING'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    START_FAILED = 'START_FAILED'
    START_PENDING = 'START_PENDING'
    STOP_FAILED = 'STOP_FAILED'
    UPDATING = 'UPDATING'


class Colorimetry(Enum):
    BT601 = 'BT601'
    BT709 = 'BT709'
    BT2020 = 'BT2020'
    BT2100 = 'BT2100'
    ST2065_1 = 'ST2065-1'
    ST2065_3 = 'ST2065-3'
    XYZ = 'XYZ'


class ConflictException(RootModel[Any]):
    root: Any


class ConnectionStatus(Enum):
    CONNECTED = 'CONNECTED'
    DISCONNECTED = 'DISCONNECTED'


class CreateBridge420Exception(RootModel[Any]):
    root: Any


class CreateFlow420Exception(RootModel[Any]):
    root: Any


class CreateGateway420Exception(RootModel[Any]):
    root: Any


class DeleteBridgeRequest(BaseModel):
    pass


class DeleteFlowRequest(BaseModel):
    pass


class DeleteGatewayRequest(BaseModel):
    pass


class DeregisterGatewayInstanceRequest(BaseModel):
    pass


class DescribeBridgeRequest(BaseModel):
    pass


class DescribeFlowRequest(BaseModel):
    pass


class DescribeGatewayInstanceRequest(BaseModel):
    pass


class DescribeGatewayRequest(BaseModel):
    pass


class DescribeOfferingRequest(BaseModel):
    pass


class DescribeReservationRequest(BaseModel):
    pass


class DesiredState(Enum):
    ACTIVE = 'ACTIVE'
    STANDBY = 'STANDBY'
    DELETED = 'DELETED'


class DurationUnits(Enum):
    MONTHS = 'MONTHS'


class EncoderProfile(Enum):
    main = 'main'
    high = 'high'


class EncodingName(Enum):
    jxsv = 'jxsv'
    raw = 'raw'
    smpte291 = 'smpte291'
    pcm = 'pcm'


class EntitlementStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class FailoverMode(Enum):
    MERGE = 'MERGE'
    FAILOVER = 'FAILOVER'


class ForbiddenException(RootModel[Any]):
    root: Any


class GatewayState(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'
    ERROR = 'ERROR'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class GrantFlowEntitlements420Exception(RootModel[Any]):
    root: Any


class InstanceState(Enum):
    REGISTERING = 'REGISTERING'
    ACTIVE = 'ACTIVE'
    DEREGISTERING = 'DEREGISTERING'
    DEREGISTERED = 'DEREGISTERED'
    REGISTRATION_ERROR = 'REGISTRATION_ERROR'
    DEREGISTRATION_ERROR = 'DEREGISTRATION_ERROR'


class InternalServerErrorException(RootModel[Any]):
    root: Any


class KeyType(Enum):
    speke = 'speke'
    static_key = 'static-key'
    srt_password = 'srt-password'


class ListBridgesRequest(BaseModel):
    pass


class ListEntitlementsRequest(BaseModel):
    pass


class ListFlowsRequest(BaseModel):
    pass


class ListGatewayInstancesRequest(BaseModel):
    pass


class ListGatewaysRequest(BaseModel):
    pass


class ListOfferingsRequest(BaseModel):
    pass


class ListReservationsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MaintenanceDay(Enum):
    Monday = 'Monday'
    Tuesday = 'Tuesday'
    Wednesday = 'Wednesday'
    Thursday = 'Thursday'
    Friday = 'Friday'
    Saturday = 'Saturday'
    Sunday = 'Sunday'


class MaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MediaStreamType(Enum):
    video = 'video'
    audio = 'audio'
    ancillary_data = 'ancillary-data'


class NetworkInterfaceType(Enum):
    ena = 'ena'
    efa = 'efa'


class NotFoundException(RootModel[Any]):
    root: Any


class PriceUnits(Enum):
    HOURLY = 'HOURLY'


class Protocol(Enum):
    zixi_push = 'zixi-push'
    rtp_fec = 'rtp-fec'
    rtp = 'rtp'
    zixi_pull = 'zixi-pull'
    rist = 'rist'
    st2110_jpegxs = 'st2110-jpegxs'
    cdi = 'cdi'
    srt_listener = 'srt-listener'
    srt_caller = 'srt-caller'
    fujitsu_qos = 'fujitsu-qos'
    udp = 'udp'


class Range(Enum):
    NARROW = 'NARROW'
    FULL = 'FULL'
    FULLPROTECT = 'FULLPROTECT'


class RemoveBridgeOutputRequest(BaseModel):
    pass


class RemoveBridgeSourceRequest(BaseModel):
    pass


class RemoveFlowMediaStreamRequest(BaseModel):
    pass


class RemoveFlowOutputRequest(BaseModel):
    pass


class RemoveFlowSourceRequest(BaseModel):
    pass


class RemoveFlowVpcInterfaceRequest(BaseModel):
    pass


class ReservationState(Enum):
    ACTIVE = 'ACTIVE'
    EXPIRED = 'EXPIRED'
    PROCESSING = 'PROCESSING'
    CANCELED = 'CANCELED'


class ResourceType(Enum):
    Mbps_Outbound_Bandwidth = 'Mbps_Outbound_Bandwidth'


class RevokeFlowEntitlementRequest(BaseModel):
    pass


class ScanMode(Enum):
    progressive = 'progressive'
    interlace = 'interlace'
    progressive_segmented_frame = 'progressive-segmented-frame'


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class SourceType(Enum):
    OWNED = 'OWNED'
    ENTITLED = 'ENTITLED'


class StartFlowRequest(BaseModel):
    pass


class State(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class Status(Enum):
    STANDBY = 'STANDBY'
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    STARTING = 'STARTING'
    STOPPING = 'STOPPING'
    ERROR = 'ERROR'


class StopFlowRequest(BaseModel):
    pass


class Tcs(Enum):
    SDR = 'SDR'
    PQ = 'PQ'
    HLG = 'HLG'
    LINEAR = 'LINEAR'
    BT2100LINPQ = 'BT2100LINPQ'
    BT2100LINHLG = 'BT2100LINHLG'
    ST2065_1 = 'ST2065-1'
    ST428_1 = 'ST428-1'
    DENSITY = 'DENSITY'


class TooManyRequestsException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    pass


class UpdateBridgeStateRequest(BaseModel):
    DesiredState_1: DesiredState = Field(..., alias='DesiredState')


class UpdateGatewayInstanceRequest(BaseModel):
    BridgePlacement_1: Optional[BridgePlacement] = Field(None, alias='BridgePlacement')


class FieldBoolean(RootModel[bool]):
    root: bool


class FieldDouble(RootModel[float]):
    root: float


class FieldInteger(RootModel[int]):
    root: int


class FieldListOfInteger(RootModel[List[FieldInteger]]):
    root: List[FieldInteger]


class FieldString(RootModel[str]):
    root: str


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, FieldString] = Field(
        ...,
        description='A map from tag keys to values. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.',
    )


class TagKeys(RootModel[List[FieldString]]):
    root: List[FieldString]


class EgressGatewayBridge1(BaseModel):
    MaxBitrate: Optional[FieldInteger] = None


class IngressGatewayBridge1(BaseModel):
    MaxBitrate: Optional[FieldInteger] = None
    MaxOutputs: Optional[FieldInteger] = None


class NetworkOutput(BaseModel):
    IpAddress: Optional[FieldString] = None
    NetworkName: Optional[FieldString] = None
    Port: Optional[FieldInteger] = None
    Protocol_1: Optional[Protocol] = Field(None, alias='Protocol')
    Ttl: Optional[FieldInteger] = None


class V1BridgesBridgeArnOutputsOutputNamePutRequest(BaseModel):
    networkOutput: Optional[NetworkOutput] = Field(
        None, description='Update an existing network output.'
    )


class NetworkSource(BaseModel):
    MulticastIp: Optional[FieldString] = None
    NetworkName: Optional[FieldString] = None
    Port: Optional[FieldInteger] = None
    Protocol_1: Optional[Protocol] = Field(None, alias='Protocol')


class V1BridgesBridgeArnStatePutRequest(BaseModel):
    desiredState: DesiredState = Field(..., description='')


class Maintenance1(BaseModel):
    MaintenanceDay_1: Optional[MaintenanceDay] = Field(None, alias='MaintenanceDay')
    MaintenanceStartHour: Optional[FieldString] = None


class Maintenance2(BaseModel):
    MaintenanceDay_1: Optional[MaintenanceDay] = Field(None, alias='MaintenanceDay')
    MaintenanceScheduledDate: Optional[FieldString] = None
    MaintenanceStartHour: Optional[FieldString] = None


class Encryption1(BaseModel):
    Algorithm_1: Optional[Algorithm] = Field(None, alias='Algorithm')
    ConstantInitializationVector: Optional[FieldString] = None
    DeviceId: Optional[FieldString] = None
    KeyType_1: Optional[KeyType] = Field(None, alias='KeyType')
    Region: Optional[FieldString] = None
    ResourceId: Optional[FieldString] = None
    RoleArn: Optional[FieldString] = None
    SecretArn: Optional[FieldString] = None
    Url: Optional[FieldString] = None


class V1FlowsFlowArnEntitlementsEntitlementArnPutRequest(BaseModel):
    description: Optional[str] = Field(
        None,
        description='A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.',
    )
    encryption: Optional[Encryption1] = Field(
        None, description='Information about the encryption of the flow.'
    )
    entitlementStatus: Optional[EntitlementStatus] = Field(
        None,
        description='An indication of whether you want to enable the entitlement to allow access, or disable it to stop streaming content to the subscriber’s flow temporarily. If you don’t specify the entitlementStatus field in your request, MediaConnect leaves the value unchanged.',
    )
    subscribers: Optional[List[FieldString]] = Field(
        None,
        description='The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.',
    )


class VpcInterfaceAttachment(BaseModel):
    VpcInterfaceName: Optional[FieldString] = None


class Decryption(BaseModel):
    Algorithm_1: Optional[Algorithm] = Field(None, alias='Algorithm')
    ConstantInitializationVector: Optional[FieldString] = None
    DeviceId: Optional[FieldString] = None
    KeyType_1: Optional[KeyType] = Field(None, alias='KeyType')
    Region: Optional[FieldString] = None
    ResourceId: Optional[FieldString] = None
    RoleArn: Optional[FieldString] = None
    SecretArn: Optional[FieldString] = None
    Url: Optional[FieldString] = None


class V1GatewayInstancesGatewayInstanceArnPutRequest(BaseModel):
    bridgePlacement: Optional[BridgePlacement] = Field(
        None,
        description='The availability of the instance to host new bridges. The bridgePlacement property can be LOCKED or AVAILABLE. If it is LOCKED, no new bridges can be deployed to this instance. If it is AVAILABLE, new bridges can be added to this instance.',
    )


class V1OfferingsOfferingArnPostRequest(BaseModel):
    reservationName: str = Field(
        ..., description='The name that you want to use for the reservation.'
    )
    start: str = Field(
        ...,
        description="The date and time that you want the reservation to begin, in Coordinated Universal Time (UTC). You can specify any date and time between 12:00am on the first day of the current month to the current time on today's date, inclusive. Specify the start in a 24-hour notation. Use the following format: YYYY-MM-DDTHH:mm:SSZ, where T and Z are literal characters. For example, to specify 11:30pm on March 5, 2020, enter 2020-03-05T23:30:00Z.",
    )


class AddBridgeNetworkOutputRequest(BaseModel):
    IpAddress: FieldString
    Name: FieldString
    NetworkName: FieldString
    Port: FieldInteger
    Protocol_1: Protocol = Field(..., alias='Protocol')
    Ttl: FieldInteger


class AddBridgeNetworkSourceRequest(BaseModel):
    MulticastIp: FieldString
    Name: FieldString
    NetworkName: FieldString
    Port: FieldInteger
    Protocol_1: Protocol = Field(..., alias='Protocol')


class AddBridgeOutputRequest(BaseModel):
    NetworkOutput: Optional[AddBridgeNetworkOutputRequest] = None


class AddEgressGatewayBridgeRequest(BaseModel):
    MaxBitrate: FieldInteger


class AddIngressGatewayBridgeRequest(BaseModel):
    MaxBitrate: FieldInteger
    MaxOutputs: FieldInteger


class AddMaintenance(BaseModel):
    MaintenanceDay_1: MaintenanceDay = Field(..., alias='MaintenanceDay')
    MaintenanceStartHour: FieldString


class BridgeFlowOutput(BaseModel):
    FlowArn: FieldString
    FlowSourceArn: FieldString
    Name: FieldString


class BridgeNetworkOutput(BaseModel):
    IpAddress: FieldString
    Name: FieldString
    NetworkName: FieldString
    Port: FieldInteger
    Protocol_1: Protocol = Field(..., alias='Protocol')
    Ttl: FieldInteger


class BridgeNetworkSource(BaseModel):
    MulticastIp: FieldString
    Name: FieldString
    NetworkName: FieldString
    Port: FieldInteger
    Protocol_1: Protocol = Field(..., alias='Protocol')


class BridgeOutput(BaseModel):
    FlowOutput: Optional[BridgeFlowOutput] = None
    NetworkOutput: Optional[BridgeNetworkOutput] = None


class DeleteBridgeResponse(BaseModel):
    BridgeArn: Optional[FieldString] = None


class DeleteFlowResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    Status_1: Optional[Status] = Field(None, alias='Status')


class DeleteGatewayResponse(BaseModel):
    GatewayArn: Optional[FieldString] = None


class DeregisterGatewayInstanceResponse(BaseModel):
    GatewayInstanceArn: Optional[FieldString] = None
    InstanceState_1: Optional[InstanceState] = Field(None, alias='InstanceState')


class EgressGatewayBridge(BaseModel):
    InstanceId: Optional[FieldString] = None
    MaxBitrate: FieldInteger


class EncodingParameters(BaseModel):
    CompressionFactor: FieldDouble
    EncoderProfile_1: EncoderProfile = Field(..., alias='EncoderProfile')


class EncodingParametersRequest(BaseModel):
    CompressionFactor: FieldDouble
    EncoderProfile_1: EncoderProfile = Field(..., alias='EncoderProfile')


class Encryption(BaseModel):
    Algorithm_1: Optional[Algorithm] = Field(None, alias='Algorithm')
    ConstantInitializationVector: Optional[FieldString] = None
    DeviceId: Optional[FieldString] = None
    KeyType_1: Optional[KeyType] = Field(None, alias='KeyType')
    Region: Optional[FieldString] = None
    ResourceId: Optional[FieldString] = None
    RoleArn: FieldString
    SecretArn: Optional[FieldString] = None
    Url: Optional[FieldString] = None


class Fmtp(BaseModel):
    ChannelOrder: Optional[FieldString] = None
    Colorimetry_1: Optional[Colorimetry] = Field(None, alias='Colorimetry')
    ExactFramerate: Optional[FieldString] = None
    Par: Optional[FieldString] = None
    Range_1: Optional[Range] = Field(None, alias='Range')
    ScanMode_1: Optional[ScanMode] = Field(None, alias='ScanMode')
    Tcs_1: Optional[Tcs] = Field(None, alias='Tcs')


class FmtpRequest(BaseModel):
    ChannelOrder: Optional[FieldString] = None
    Colorimetry_1: Optional[Colorimetry] = Field(None, alias='Colorimetry')
    ExactFramerate: Optional[FieldString] = None
    Par: Optional[FieldString] = None
    Range_1: Optional[Range] = Field(None, alias='Range')
    ScanMode_1: Optional[ScanMode] = Field(None, alias='ScanMode')
    Tcs_1: Optional[Tcs] = Field(None, alias='Tcs')


class GatewayNetwork(BaseModel):
    CidrBlock: FieldString
    Name: FieldString


class IngressGatewayBridge(BaseModel):
    InstanceId: Optional[FieldString] = None
    MaxBitrate: FieldInteger
    MaxOutputs: FieldInteger


class Interface(BaseModel):
    Name: FieldString


class InterfaceRequest(BaseModel):
    Name: FieldString


class ListedBridge(BaseModel):
    BridgeArn: FieldString
    BridgeState_1: BridgeState = Field(..., alias='BridgeState')
    BridgeType: FieldString
    Name: FieldString
    PlacementArn: FieldString


class ListedEntitlement(BaseModel):
    DataTransferSubscriberFeePercent: Optional[FieldInteger] = None
    EntitlementArn: FieldString
    EntitlementName: FieldString


class ListedGateway(BaseModel):
    GatewayArn: FieldString
    GatewayState_1: GatewayState = Field(..., alias='GatewayState')
    Name: FieldString


class ListedGatewayInstance(BaseModel):
    GatewayArn: FieldString
    GatewayInstanceArn: FieldString
    InstanceId: FieldString
    InstanceState_1: Optional[InstanceState] = Field(None, alias='InstanceState')


class Maintenance(BaseModel):
    MaintenanceDay_1: Optional[MaintenanceDay] = Field(None, alias='MaintenanceDay')
    MaintenanceDeadline: Optional[FieldString] = None
    MaintenanceScheduledDate: Optional[FieldString] = None
    MaintenanceStartHour: Optional[FieldString] = None


class MediaStreamAttributes(BaseModel):
    Fmtp_1: Fmtp = Field(..., alias='Fmtp')
    Lang: Optional[FieldString] = None


class MediaStreamAttributesRequest(BaseModel):
    Fmtp: Optional[FmtpRequest] = None
    Lang: Optional[FieldString] = None


class MessageDetail(BaseModel):
    Code: FieldString
    Message: FieldString
    ResourceName: Optional[FieldString] = None


class PurchaseOfferingRequest(BaseModel):
    ReservationName: FieldString
    Start: FieldString


class RemoveBridgeOutputResponse(BaseModel):
    BridgeArn: Optional[FieldString] = None
    OutputName: Optional[FieldString] = None


class RemoveBridgeSourceResponse(BaseModel):
    BridgeArn: Optional[FieldString] = None
    SourceName: Optional[FieldString] = None


class RemoveFlowMediaStreamResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    MediaStreamName: Optional[FieldString] = None


class RemoveFlowOutputResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    OutputArn: Optional[FieldString] = None


class RemoveFlowSourceResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    SourceArn: Optional[FieldString] = None


class ResourceSpecification(BaseModel):
    ReservedBitrate: Optional[FieldInteger] = None
    ResourceType_1: ResourceType = Field(..., alias='ResourceType')


class RevokeFlowEntitlementResponse(BaseModel):
    EntitlementArn: Optional[FieldString] = None
    FlowArn: Optional[FieldString] = None


class SourcePriority(BaseModel):
    PrimarySource: Optional[FieldString] = None


class StartFlowResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    Status_1: Optional[Status] = Field(None, alias='Status')


class StopFlowResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    Status_1: Optional[Status] = Field(None, alias='Status')


class UpdateBridgeNetworkOutputRequest(BaseModel):
    IpAddress: Optional[FieldString] = None
    NetworkName: Optional[FieldString] = None
    Port: Optional[FieldInteger] = None
    Protocol_1: Optional[Protocol] = Field(None, alias='Protocol')
    Ttl: Optional[FieldInteger] = None


class UpdateBridgeNetworkSourceRequest(BaseModel):
    MulticastIp: Optional[FieldString] = None
    NetworkName: Optional[FieldString] = None
    Port: Optional[FieldInteger] = None
    Protocol_1: Optional[Protocol] = Field(None, alias='Protocol')


class UpdateBridgeOutputRequest(BaseModel):
    NetworkOutput: Optional[UpdateBridgeNetworkOutputRequest] = None


class UpdateBridgeOutputResponse(BaseModel):
    BridgeArn: Optional[FieldString] = None
    Output: Optional[BridgeOutput] = None


class UpdateBridgeStateResponse(BaseModel):
    BridgeArn: Optional[FieldString] = None
    DesiredState_1: Optional[DesiredState] = Field(None, alias='DesiredState')


class UpdateEgressGatewayBridgeRequest(BaseModel):
    MaxBitrate: Optional[FieldInteger] = None


class UpdateEncryption(BaseModel):
    Algorithm_1: Optional[Algorithm] = Field(None, alias='Algorithm')
    ConstantInitializationVector: Optional[FieldString] = None
    DeviceId: Optional[FieldString] = None
    KeyType_1: Optional[KeyType] = Field(None, alias='KeyType')
    Region: Optional[FieldString] = None
    ResourceId: Optional[FieldString] = None
    RoleArn: Optional[FieldString] = None
    SecretArn: Optional[FieldString] = None
    Url: Optional[FieldString] = None


class UpdateFailoverConfig(BaseModel):
    FailoverMode_1: Optional[FailoverMode] = Field(None, alias='FailoverMode')
    RecoveryWindow: Optional[FieldInteger] = None
    SourcePriority_1: Optional[SourcePriority] = Field(None, alias='SourcePriority')
    State_1: Optional[State] = Field(None, alias='State')


class UpdateFlowMediaStreamRequest(BaseModel):
    Attributes: Optional[MediaStreamAttributesRequest] = None
    ClockRate: Optional[FieldInteger] = None
    Description: Optional[FieldString] = None
    MediaStreamType_1: Optional[MediaStreamType] = Field(None, alias='MediaStreamType')
    VideoFormat: Optional[FieldString] = None


class UpdateGatewayInstanceResponse(BaseModel):
    BridgePlacement_1: Optional[BridgePlacement] = Field(None, alias='BridgePlacement')
    GatewayInstanceArn: Optional[FieldString] = None


class UpdateIngressGatewayBridgeRequest(BaseModel):
    MaxBitrate: Optional[FieldInteger] = None
    MaxOutputs: Optional[FieldInteger] = None


class UpdateMaintenance(BaseModel):
    MaintenanceDay_1: Optional[MaintenanceDay] = Field(None, alias='MaintenanceDay')
    MaintenanceScheduledDate: Optional[FieldString] = None
    MaintenanceStartHour: Optional[FieldString] = None


class FieldListOfAddBridgeOutputRequest(RootModel[List[AddBridgeOutputRequest]]):
    root: List[AddBridgeOutputRequest]


class FieldListOfBridgeOutput(RootModel[List[BridgeOutput]]):
    root: List[BridgeOutput]


class FieldListOfGatewayNetwork(RootModel[List[GatewayNetwork]]):
    root: List[GatewayNetwork]


class FieldListOfListedBridge(RootModel[List[ListedBridge]]):
    root: List[ListedBridge]


class FieldListOfListedEntitlement(RootModel[List[ListedEntitlement]]):
    root: List[ListedEntitlement]


class FieldListOfListedGateway(RootModel[List[ListedGateway]]):
    root: List[ListedGateway]


class FieldListOfListedGatewayInstance(RootModel[List[ListedGatewayInstance]]):
    root: List[ListedGatewayInstance]


class FieldListOfMessageDetail(RootModel[List[MessageDetail]]):
    root: List[MessageDetail]


class FieldListOfString(RootModel[List[FieldString]]):
    root: List[FieldString]


class FieldMapOfString(RootModel[Optional[Dict[str, FieldString]]]):
    root: Optional[Dict[str, FieldString]] = None


class SourceFailoverConfig(BaseModel):
    FailoverMode_1: Optional[FailoverMode] = Field(None, alias='FailoverMode')
    RecoveryWindow: Optional[FieldInteger] = None
    SourcePriority_1: Optional[SourcePriority] = Field(None, alias='SourcePriority')
    State_1: Optional[State] = Field(None, alias='State')


class V1BridgesBridgeArnPutRequest(BaseModel):
    egressGatewayBridge: Optional[EgressGatewayBridge1] = Field(None, description='')
    ingressGatewayBridge: Optional[IngressGatewayBridge1] = Field(None, description='')
    sourceFailoverConfig: Optional[SourceFailoverConfig] = Field(
        None, description='The settings for source failover.'
    )


class V1BridgesBridgeArnOutputsPostRequest(BaseModel):
    outputs: List[AddBridgeOutputRequest] = Field(
        ..., description='The outputs that you want to add to this bridge.'
    )


class FlowSource(BaseModel):
    FlowArn: Optional[FieldString] = None
    FlowVpcInterfaceAttachment: Optional[VpcInterfaceAttachment] = None


class V1BridgesBridgeArnSourcesSourceNamePutRequest(BaseModel):
    flowSource: Optional[FlowSource] = Field(
        None, description='Update the flow source of the bridge.'
    )
    networkSource: Optional[NetworkSource] = Field(
        None, description='Update the network source of the bridge.'
    )


class V1FlowsFlowArnPutRequest(BaseModel):
    maintenance: Optional[Maintenance2] = Field(
        None, description='Update maintenance setting for a flow'
    )
    sourceFailoverConfig: Optional[SourceFailoverConfig] = Field(
        None, description='The settings for source failover.'
    )


class Attributes(BaseModel):
    Fmtp: Optional[FmtpRequest] = None
    Lang: Optional[FieldString] = None


class V1FlowsFlowArnMediaStreamsMediaStreamNamePutRequest(BaseModel):
    attributes: Optional[Attributes] = Field(
        None, description='Attributes that are related to the media stream.'
    )
    clockRate: Optional[int] = Field(
        None,
        description='The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.',
    )
    description: Optional[str] = Field(None, description='Description')
    mediaStreamType: Optional[MediaStreamType] = Field(
        None, description='The type of media stream.'
    )
    videoFormat: Optional[str] = Field(None, description='The resolution of the video.')


class GatewayBridgeSource1(BaseModel):
    BridgeArn: Optional[FieldString] = None
    VpcInterfaceAttachment_1: Optional[VpcInterfaceAttachment] = Field(
        None, alias='VpcInterfaceAttachment'
    )


class V1GatewaysPostRequest(BaseModel):
    egressCidrBlocks: List[FieldString] = Field(
        ...,
        description='The range of IP addresses that are allowed to contribute content or initiate output requests for flows communicating with this gateway. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.',
    )
    name: str = Field(
        ...,
        description='The name of the gateway. This name can not be modified after the gateway is created.',
    )
    networks: List[GatewayNetwork] = Field(
        ..., description='The list of networks that you want to add.'
    )


class AddBridgeFlowSourceRequest(BaseModel):
    FlowArn: FieldString
    FlowVpcInterfaceAttachment: Optional[VpcInterfaceAttachment] = None
    Name: FieldString


class AddBridgeOutputsRequest(BaseModel):
    Outputs: FieldListOfAddBridgeOutputRequest


class AddBridgeOutputsResponse(BaseModel):
    BridgeArn: Optional[FieldString] = None
    Outputs: Optional[FieldListOfBridgeOutput] = None


class AddBridgeSourceRequest(BaseModel):
    FlowSource: Optional[AddBridgeFlowSourceRequest] = None
    NetworkSource: Optional[AddBridgeNetworkSourceRequest] = None


class AddMediaStreamRequest(BaseModel):
    Attributes: Optional[MediaStreamAttributesRequest] = None
    ClockRate: Optional[FieldInteger] = None
    Description: Optional[FieldString] = None
    MediaStreamId: FieldInteger
    MediaStreamName: FieldString
    MediaStreamType_1: MediaStreamType = Field(..., alias='MediaStreamType')
    VideoFormat: Optional[FieldString] = None


class BridgeFlowSource(BaseModel):
    FlowArn: FieldString
    FlowVpcInterfaceAttachment: Optional[VpcInterfaceAttachment] = None
    Name: FieldString
    OutputArn: Optional[FieldString] = None


class BridgeSource(BaseModel):
    FlowSource: Optional[BridgeFlowSource] = None
    NetworkSource: Optional[BridgeNetworkSource] = None


class CreateGatewayRequest(BaseModel):
    EgressCidrBlocks: FieldListOfString
    Name: FieldString
    Networks: FieldListOfGatewayNetwork


class DestinationConfiguration(BaseModel):
    DestinationIp: FieldString
    DestinationPort: FieldInteger
    Interface_1: Interface = Field(..., alias='Interface')
    OutboundIp: FieldString


class DestinationConfigurationRequest(BaseModel):
    DestinationIp: FieldString
    DestinationPort: FieldInteger
    Interface: InterfaceRequest


class Entitlement(BaseModel):
    DataTransferSubscriberFeePercent: Optional[FieldInteger] = None
    Description: Optional[FieldString] = None
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    EntitlementArn: FieldString
    EntitlementStatus_1: Optional[EntitlementStatus] = Field(
        None, alias='EntitlementStatus'
    )
    Name: FieldString
    Subscribers: FieldListOfString


class FailoverConfig(BaseModel):
    FailoverMode_1: Optional[FailoverMode] = Field(None, alias='FailoverMode')
    RecoveryWindow: Optional[FieldInteger] = None
    SourcePriority_1: Optional[SourcePriority] = Field(None, alias='SourcePriority')
    State_1: Optional[State] = Field(None, alias='State')


class Gateway(BaseModel):
    EgressCidrBlocks: FieldListOfString
    GatewayArn: FieldString
    GatewayMessages: Optional[FieldListOfMessageDetail] = None
    GatewayState_1: Optional[GatewayState] = Field(None, alias='GatewayState')
    Name: FieldString
    Networks: FieldListOfGatewayNetwork


class GatewayBridgeSource(BaseModel):
    BridgeArn: FieldString
    VpcInterfaceAttachment_1: Optional[VpcInterfaceAttachment] = Field(
        None, alias='VpcInterfaceAttachment'
    )


class GatewayInstance(BaseModel):
    BridgePlacement_1: BridgePlacement = Field(..., alias='BridgePlacement')
    ConnectionStatus_1: ConnectionStatus = Field(..., alias='ConnectionStatus')
    GatewayArn: FieldString
    GatewayInstanceArn: FieldString
    InstanceId: FieldString
    InstanceMessages: Optional[FieldListOfMessageDetail] = None
    InstanceState_1: InstanceState = Field(..., alias='InstanceState')
    RunningBridgeCount: FieldInteger


class GrantEntitlementRequest(BaseModel):
    DataTransferSubscriberFeePercent: Optional[FieldInteger] = None
    Description: Optional[FieldString] = None
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    EntitlementStatus_1: Optional[EntitlementStatus] = Field(
        None, alias='EntitlementStatus'
    )
    Name: Optional[FieldString] = None
    Subscribers: FieldListOfString


class InputConfiguration(BaseModel):
    InputIp: FieldString
    InputPort: FieldInteger
    Interface_1: Interface = Field(..., alias='Interface')


class InputConfigurationRequest(BaseModel):
    InputPort: FieldInteger
    Interface: InterfaceRequest


class ListBridgesResponse(BaseModel):
    Bridges: Optional[FieldListOfListedBridge] = None
    NextToken: Optional[FieldString] = None


class ListEntitlementsResponse(BaseModel):
    Entitlements: Optional[FieldListOfListedEntitlement] = None
    NextToken: Optional[FieldString] = None


class ListGatewayInstancesResponse(BaseModel):
    Instances: Optional[FieldListOfListedGatewayInstance] = None
    NextToken: Optional[FieldString] = None


class ListGatewaysResponse(BaseModel):
    Gateways: Optional[FieldListOfListedGateway] = None
    NextToken: Optional[FieldString] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[FieldMapOfString] = None


class ListedFlow(BaseModel):
    AvailabilityZone: FieldString
    Description: FieldString
    FlowArn: FieldString
    Maintenance_1: Optional[Maintenance] = Field(None, alias='Maintenance')
    Name: FieldString
    SourceType_1: SourceType = Field(..., alias='SourceType')
    Status_1: Status = Field(..., alias='Status')


class MediaStream(BaseModel):
    Attributes: Optional[MediaStreamAttributes] = None
    ClockRate: Optional[FieldInteger] = None
    Description: Optional[FieldString] = None
    Fmt: FieldInteger
    MediaStreamId: FieldInteger
    MediaStreamName: FieldString
    MediaStreamType_1: MediaStreamType = Field(..., alias='MediaStreamType')
    VideoFormat: Optional[FieldString] = None


class Messages(BaseModel):
    Errors: FieldListOfString


class Offering(BaseModel):
    CurrencyCode: FieldString
    Duration: FieldInteger
    DurationUnits_1: DurationUnits = Field(..., alias='DurationUnits')
    OfferingArn: FieldString
    OfferingDescription: FieldString
    PricePerUnit: FieldString
    PriceUnits_1: PriceUnits = Field(..., alias='PriceUnits')
    ResourceSpecification_1: ResourceSpecification = Field(
        ..., alias='ResourceSpecification'
    )


class RemoveFlowVpcInterfaceResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    NonDeletedNetworkInterfaceIds: Optional[FieldListOfString] = None
    VpcInterfaceName: Optional[FieldString] = None


class Reservation(BaseModel):
    CurrencyCode: FieldString
    Duration: FieldInteger
    DurationUnits_1: DurationUnits = Field(..., alias='DurationUnits')
    End: FieldString
    OfferingArn: FieldString
    OfferingDescription: FieldString
    PricePerUnit: FieldString
    PriceUnits_1: PriceUnits = Field(..., alias='PriceUnits')
    ReservationArn: FieldString
    ReservationName: FieldString
    ReservationState_1: ReservationState = Field(..., alias='ReservationState')
    ResourceSpecification_1: ResourceSpecification = Field(
        ..., alias='ResourceSpecification'
    )
    Start: FieldString


class SetGatewayBridgeSourceRequest(BaseModel):
    BridgeArn: FieldString
    VpcInterfaceAttachment_1: Optional[VpcInterfaceAttachment] = Field(
        None, alias='VpcInterfaceAttachment'
    )


class TagResourceRequest(BaseModel):
    Tags: FieldMapOfString


class Transport(BaseModel):
    CidrAllowList: Optional[FieldListOfString] = None
    MaxBitrate: Optional[FieldInteger] = None
    MaxLatency: Optional[FieldInteger] = None
    MaxSyncBuffer: Optional[FieldInteger] = None
    MinLatency: Optional[FieldInteger] = None
    Protocol_1: Protocol = Field(..., alias='Protocol')
    RemoteId: Optional[FieldString] = None
    SenderControlPort: Optional[FieldInteger] = None
    SenderIpAddress: Optional[FieldString] = None
    SmoothingLatency: Optional[FieldInteger] = None
    SourceListenerAddress: Optional[FieldString] = None
    SourceListenerPort: Optional[FieldInteger] = None
    StreamId: Optional[FieldString] = None


class UpdateBridgeFlowSourceRequest(BaseModel):
    FlowArn: Optional[FieldString] = None
    FlowVpcInterfaceAttachment: Optional[VpcInterfaceAttachment] = None


class UpdateBridgeRequest(BaseModel):
    EgressGatewayBridge: Optional[UpdateEgressGatewayBridgeRequest] = None
    IngressGatewayBridge: Optional[UpdateIngressGatewayBridgeRequest] = None
    SourceFailoverConfig: Optional[UpdateFailoverConfig] = None


class UpdateBridgeSourceRequest(BaseModel):
    FlowSource: Optional[UpdateBridgeFlowSourceRequest] = None
    NetworkSource: Optional[UpdateBridgeNetworkSourceRequest] = None


class UpdateBridgeSourceResponse(BaseModel):
    BridgeArn: Optional[FieldString] = None
    Source: Optional[BridgeSource] = None


class UpdateFlowEntitlementRequest(BaseModel):
    Description: Optional[FieldString] = None
    Encryption: Optional[UpdateEncryption] = None
    EntitlementStatus_1: Optional[EntitlementStatus] = Field(
        None, alias='EntitlementStatus'
    )
    Subscribers: Optional[FieldListOfString] = None


class UpdateFlowEntitlementResponse(BaseModel):
    Entitlement_1: Optional[Entitlement] = Field(None, alias='Entitlement')
    FlowArn: Optional[FieldString] = None


class UpdateFlowMediaStreamResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    MediaStream_1: Optional[MediaStream] = Field(None, alias='MediaStream')


class UpdateFlowRequest(BaseModel):
    Maintenance: Optional[UpdateMaintenance] = None
    SourceFailoverConfig: Optional[UpdateFailoverConfig] = None


class UpdateGatewayBridgeSourceRequest(BaseModel):
    BridgeArn: Optional[FieldString] = None
    VpcInterfaceAttachment_1: Optional[VpcInterfaceAttachment] = Field(
        None, alias='VpcInterfaceAttachment'
    )


class VpcInterface(BaseModel):
    Name: FieldString
    NetworkInterfaceIds: FieldListOfString
    NetworkInterfaceType_1: NetworkInterfaceType = Field(
        ..., alias='NetworkInterfaceType'
    )
    RoleArn: FieldString
    SecurityGroupIds: FieldListOfString
    SubnetId: FieldString


class VpcInterfaceRequest(BaseModel):
    Name: FieldString
    NetworkInterfaceType_1: Optional[NetworkInterfaceType] = Field(
        None, alias='NetworkInterfaceType'
    )
    RoleArn: FieldString
    SecurityGroupIds: FieldListOfString
    SubnetId: FieldString


class FieldListOfAddBridgeSourceRequest(RootModel[List[AddBridgeSourceRequest]]):
    root: List[AddBridgeSourceRequest]


class FieldListOfAddMediaStreamRequest(RootModel[List[AddMediaStreamRequest]]):
    root: List[AddMediaStreamRequest]


class FieldListOfBridgeSource(RootModel[List[BridgeSource]]):
    root: List[BridgeSource]


class FieldListOfDestinationConfiguration(RootModel[List[DestinationConfiguration]]):
    root: List[DestinationConfiguration]


class FieldListOfDestinationConfigurationRequest(
    RootModel[List[DestinationConfigurationRequest]]
):
    root: List[DestinationConfigurationRequest]


class FieldListOfEntitlement(RootModel[List[Entitlement]]):
    root: List[Entitlement]


class FieldListOfGrantEntitlementRequest(RootModel[List[GrantEntitlementRequest]]):
    root: List[GrantEntitlementRequest]


class FieldListOfInputConfiguration(RootModel[List[InputConfiguration]]):
    root: List[InputConfiguration]


class FieldListOfInputConfigurationRequest(RootModel[List[InputConfigurationRequest]]):
    root: List[InputConfigurationRequest]


class FieldListOfListedFlow(RootModel[List[ListedFlow]]):
    root: List[ListedFlow]


class FieldListOfMediaStream(RootModel[List[MediaStream]]):
    root: List[MediaStream]


class FieldListOfOffering(RootModel[List[Offering]]):
    root: List[Offering]


class FieldListOfReservation(RootModel[List[Reservation]]):
    root: List[Reservation]


class FieldListOfVpcInterface(RootModel[List[VpcInterface]]):
    root: List[VpcInterface]


class FieldListOfVpcInterfaceRequest(RootModel[List[VpcInterfaceRequest]]):
    root: List[VpcInterfaceRequest]


class V1BridgesPostRequest(BaseModel):
    egressGatewayBridge: Optional[EgressGatewayBridge1] = Field(
        None,
        description='Create a bridge with the egress bridge type. An egress bridge is a cloud-to-ground bridge. The content comes from an existing MediaConnect flow and is delivered to your premises.',
    )
    ingressGatewayBridge: Optional[IngressGatewayBridge1] = Field(
        None,
        description='Create a bridge with the ingress bridge type. An ingress bridge is a ground-to-cloud bridge. The content originates at your premises and is delivered to the cloud.',
    )
    name: str = Field(
        ...,
        description='The name of the bridge. This name can not be modified after the bridge is created.',
    )
    outputs: Optional[List[AddBridgeOutputRequest]] = Field(
        None, description='The outputs that you want to add to this bridge.'
    )
    placementArn: str = Field(
        ..., description='The bridge placement Amazon Resource Number (ARN).'
    )
    sourceFailoverConfig: Optional[SourceFailoverConfig] = Field(
        None, description='The settings for source failover.'
    )
    sources: List[AddBridgeSourceRequest] = Field(
        ..., description='The sources that you want to add to this bridge.'
    )


class V1BridgesBridgeArnSourcesPostRequest(BaseModel):
    sources: List[AddBridgeSourceRequest] = Field(
        ..., description='The sources that you want to add to this bridge.'
    )


class V1FlowsFlowArnEntitlementsPostRequest(BaseModel):
    entitlements: List[GrantEntitlementRequest] = Field(
        ..., description='The list of entitlements that you want to grant.'
    )


class V1FlowsFlowArnMediaStreamsPostRequest(BaseModel):
    mediaStreams: List[AddMediaStreamRequest] = Field(
        ..., description='The media streams that you want to add to the flow.'
    )


class V1FlowsFlowArnVpcInterfacesPostRequest(BaseModel):
    vpcInterfaces: List[VpcInterfaceRequest] = Field(
        ..., description='A list of VPC interfaces that you want to add.'
    )


class AddBridgeSourcesRequest(BaseModel):
    Sources: FieldListOfAddBridgeSourceRequest


class AddBridgeSourcesResponse(BaseModel):
    BridgeArn: Optional[FieldString] = None
    Sources: Optional[FieldListOfBridgeSource] = None


class AddFlowMediaStreamsRequest(BaseModel):
    MediaStreams: FieldListOfAddMediaStreamRequest


class AddFlowMediaStreamsResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    MediaStreams: Optional[FieldListOfMediaStream] = None


class AddFlowVpcInterfacesRequest(BaseModel):
    VpcInterfaces: FieldListOfVpcInterfaceRequest


class AddFlowVpcInterfacesResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    VpcInterfaces: Optional[FieldListOfVpcInterface] = None


class Bridge(BaseModel):
    BridgeArn: FieldString
    BridgeMessages: Optional[FieldListOfMessageDetail] = None
    BridgeState_1: BridgeState = Field(..., alias='BridgeState')
    EgressGatewayBridge_1: Optional[EgressGatewayBridge] = Field(
        None, alias='EgressGatewayBridge'
    )
    IngressGatewayBridge_1: Optional[IngressGatewayBridge] = Field(
        None, alias='IngressGatewayBridge'
    )
    Name: FieldString
    Outputs: Optional[FieldListOfBridgeOutput] = None
    PlacementArn: FieldString
    SourceFailoverConfig: Optional[FailoverConfig] = None
    Sources: Optional[FieldListOfBridgeSource] = None


class CreateBridgeRequest(BaseModel):
    EgressGatewayBridge: Optional[AddEgressGatewayBridgeRequest] = None
    IngressGatewayBridge: Optional[AddIngressGatewayBridgeRequest] = None
    Name: FieldString
    Outputs: Optional[FieldListOfAddBridgeOutputRequest] = None
    PlacementArn: FieldString
    SourceFailoverConfig: Optional[FailoverConfig] = None
    Sources: FieldListOfAddBridgeSourceRequest


class CreateBridgeResponse(BaseModel):
    Bridge_1: Optional[Bridge] = Field(None, alias='Bridge')


class CreateGatewayResponse(BaseModel):
    Gateway_1: Optional[Gateway] = Field(None, alias='Gateway')


class DescribeBridgeResponse(BaseModel):
    Bridge_1: Optional[Bridge] = Field(None, alias='Bridge')


class DescribeGatewayInstanceResponse(BaseModel):
    GatewayInstance_1: Optional[GatewayInstance] = Field(None, alias='GatewayInstance')


class DescribeGatewayResponse(BaseModel):
    Gateway_1: Optional[Gateway] = Field(None, alias='Gateway')


class DescribeOfferingResponse(BaseModel):
    Offering_1: Optional[Offering] = Field(None, alias='Offering')


class DescribeReservationResponse(BaseModel):
    Reservation_1: Optional[Reservation] = Field(None, alias='Reservation')


class GrantFlowEntitlementsRequest(BaseModel):
    Entitlements: FieldListOfGrantEntitlementRequest


class GrantFlowEntitlementsResponse(BaseModel):
    Entitlements: Optional[FieldListOfEntitlement] = None
    FlowArn: Optional[FieldString] = None


class ListFlowsResponse(BaseModel):
    Flows: Optional[FieldListOfListedFlow] = None
    NextToken: Optional[FieldString] = None


class ListOfferingsResponse(BaseModel):
    NextToken: Optional[FieldString] = None
    Offerings: Optional[FieldListOfOffering] = None


class ListReservationsResponse(BaseModel):
    NextToken: Optional[FieldString] = None
    Reservations: Optional[FieldListOfReservation] = None


class MediaStreamOutputConfiguration(BaseModel):
    DestinationConfigurations: Optional[FieldListOfDestinationConfiguration] = None
    EncodingName_1: EncodingName = Field(..., alias='EncodingName')
    EncodingParameters_1: Optional[EncodingParameters] = Field(
        None, alias='EncodingParameters'
    )
    MediaStreamName: FieldString


class MediaStreamOutputConfigurationRequest(BaseModel):
    DestinationConfigurations: Optional[FieldListOfDestinationConfigurationRequest] = (
        None
    )
    EncodingName_1: EncodingName = Field(..., alias='EncodingName')
    EncodingParameters: Optional[EncodingParametersRequest] = None
    MediaStreamName: FieldString


class MediaStreamSourceConfiguration(BaseModel):
    EncodingName_1: EncodingName = Field(..., alias='EncodingName')
    InputConfigurations: Optional[FieldListOfInputConfiguration] = None
    MediaStreamName: FieldString


class MediaStreamSourceConfigurationRequest(BaseModel):
    EncodingName_1: EncodingName = Field(..., alias='EncodingName')
    InputConfigurations: Optional[FieldListOfInputConfigurationRequest] = None
    MediaStreamName: FieldString


class PurchaseOfferingResponse(BaseModel):
    Reservation_1: Optional[Reservation] = Field(None, alias='Reservation')


class UpdateBridgeResponse(BaseModel):
    Bridge_1: Optional[Bridge] = Field(None, alias='Bridge')


class FieldListOfMediaStreamOutputConfiguration(
    RootModel[List[MediaStreamOutputConfiguration]]
):
    root: List[MediaStreamOutputConfiguration]


class FieldListOfMediaStreamOutputConfigurationRequest(
    RootModel[List[MediaStreamOutputConfigurationRequest]]
):
    root: List[MediaStreamOutputConfigurationRequest]


class FieldListOfMediaStreamSourceConfiguration(
    RootModel[List[MediaStreamSourceConfiguration]]
):
    root: List[MediaStreamSourceConfiguration]


class FieldListOfMediaStreamSourceConfigurationRequest(
    RootModel[List[MediaStreamSourceConfigurationRequest]]
):
    root: List[MediaStreamSourceConfigurationRequest]


class Source1(BaseModel):
    Decryption: Optional[Encryption] = None
    Description: Optional[FieldString] = None
    EntitlementArn: Optional[FieldString] = None
    GatewayBridgeSource: Optional[SetGatewayBridgeSourceRequest] = None
    IngestPort: Optional[FieldInteger] = None
    MaxBitrate: Optional[FieldInteger] = None
    MaxLatency: Optional[FieldInteger] = None
    MaxSyncBuffer: Optional[FieldInteger] = None
    MediaStreamSourceConfigurations: Optional[
        FieldListOfMediaStreamSourceConfigurationRequest
    ] = None
    MinLatency: Optional[FieldInteger] = None
    Name: Optional[FieldString] = None
    Protocol_1: Optional[Protocol] = Field(None, alias='Protocol')
    SenderControlPort: Optional[FieldInteger] = None
    SenderIpAddress: Optional[FieldString] = None
    SourceListenerAddress: Optional[FieldString] = None
    SourceListenerPort: Optional[FieldInteger] = None
    StreamId: Optional[FieldString] = None
    VpcInterfaceName: Optional[FieldString] = None
    WhitelistCidr: Optional[FieldString] = None


class V1FlowsFlowArnOutputsOutputArnPutRequest(BaseModel):
    cidrAllowList: Optional[List[FieldString]] = Field(
        None,
        description='The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.',
    )
    description: Optional[str] = Field(
        None,
        description='A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.',
    )
    destination: Optional[str] = Field(
        None, description='The IP address where you want to send the output.'
    )
    encryption: Optional[Encryption1] = Field(
        None, description='Information about the encryption of the flow.'
    )
    maxLatency: Optional[int] = Field(
        None,
        description='The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.',
    )
    mediaStreamOutputConfigurations: Optional[
        List[MediaStreamOutputConfigurationRequest]
    ] = Field(
        None,
        description='The media streams that are associated with the output, and the parameters for those associations.',
    )
    minLatency: Optional[int] = Field(
        None,
        description='The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.',
    )
    port: Optional[int] = Field(
        None, description='The port to use when content is distributed to this output.'
    )
    protocol: Optional[Protocol] = Field(
        None, description='The protocol to use for the output.'
    )
    remoteId: Optional[str] = Field(
        None, description='The remote ID for the Zixi-pull stream.'
    )
    senderControlPort: Optional[int] = Field(
        None,
        description='The port that the flow uses to send outbound requests to initiate connection with the sender.',
    )
    senderIpAddress: Optional[str] = Field(
        None,
        description='The IP address that the flow communicates with to initiate connection with the sender.',
    )
    smoothingLatency: Optional[int] = Field(
        None,
        description='The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.',
    )
    streamId: Optional[str] = Field(
        None,
        description='The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.',
    )
    vpcInterfaceAttachment: Optional[VpcInterfaceAttachment] = Field(
        None, description='The settings for attaching a VPC interface to an resource.'
    )


class V1FlowsFlowArnSourceSourceArnPutRequest(BaseModel):
    decryption: Optional[Decryption] = Field(
        None, description='Information about the encryption of the flow.'
    )
    description: Optional[str] = Field(
        None,
        description='A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.',
    )
    entitlementArn: Optional[str] = Field(
        None,
        description="The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.",
    )
    gatewayBridgeSource: Optional[GatewayBridgeSource1] = Field(
        None,
        description='The source configuration for cloud flows receiving a stream from a bridge.',
    )
    ingestPort: Optional[int] = Field(
        None,
        description='The port that the flow will be listening on for incoming content.',
    )
    maxBitrate: Optional[int] = Field(
        None,
        description='The smoothing max bitrate (in bps) for RIST, RTP, and RTP-FEC streams.',
    )
    maxLatency: Optional[int] = Field(
        None,
        description='The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.',
    )
    maxSyncBuffer: Optional[int] = Field(
        None,
        description='The size of the buffer (in milliseconds) to use to sync incoming source data.',
    )
    mediaStreamSourceConfigurations: Optional[
        List[MediaStreamSourceConfigurationRequest]
    ] = Field(
        None,
        description='The media streams that are associated with the source, and the parameters for those associations.',
    )
    minLatency: Optional[int] = Field(
        None,
        description='The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.',
    )
    protocol: Optional[Protocol] = Field(
        None, description='The protocol that is used by the source.'
    )
    senderControlPort: Optional[int] = Field(
        None,
        description='The port that the flow uses to send outbound requests to initiate connection with the sender.',
    )
    senderIpAddress: Optional[str] = Field(
        None,
        description='The IP address that the flow communicates with to initiate connection with the sender.',
    )
    sourceListenerAddress: Optional[str] = Field(
        None, description='Source IP or domain name for SRT-caller protocol.'
    )
    sourceListenerPort: Optional[int] = Field(
        None, description='Source port for SRT-caller protocol.'
    )
    streamId: Optional[str] = Field(
        None,
        description='The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams.',
    )
    vpcInterfaceName: Optional[str] = Field(
        None, description='The name of the VPC interface to use for this source.'
    )
    whitelistCidr: Optional[str] = Field(
        None,
        description='The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.',
    )


class AddOutputRequest(BaseModel):
    CidrAllowList: Optional[FieldListOfString] = None
    Description: Optional[FieldString] = None
    Destination: Optional[FieldString] = None
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    MaxLatency: Optional[FieldInteger] = None
    MediaStreamOutputConfigurations: Optional[
        FieldListOfMediaStreamOutputConfigurationRequest
    ] = None
    MinLatency: Optional[FieldInteger] = None
    Name: Optional[FieldString] = None
    Port: Optional[FieldInteger] = None
    Protocol_1: Protocol = Field(..., alias='Protocol')
    RemoteId: Optional[FieldString] = None
    SenderControlPort: Optional[FieldInteger] = None
    SmoothingLatency: Optional[FieldInteger] = None
    StreamId: Optional[FieldString] = None
    VpcInterfaceAttachment_1: Optional[VpcInterfaceAttachment] = Field(
        None, alias='VpcInterfaceAttachment'
    )


class Output(BaseModel):
    BridgeArn: Optional[FieldString] = None
    BridgePorts: Optional[FieldListOfInteger] = None
    DataTransferSubscriberFeePercent: Optional[FieldInteger] = None
    Description: Optional[FieldString] = None
    Destination: Optional[FieldString] = None
    Encryption_1: Optional[Encryption] = Field(None, alias='Encryption')
    EntitlementArn: Optional[FieldString] = None
    ListenerAddress: Optional[FieldString] = None
    MediaLiveInputArn: Optional[FieldString] = None
    MediaStreamOutputConfigurations: Optional[
        FieldListOfMediaStreamOutputConfiguration
    ] = None
    Name: FieldString
    OutputArn: FieldString
    Port: Optional[FieldInteger] = None
    Transport_1: Optional[Transport] = Field(None, alias='Transport')
    VpcInterfaceAttachment_1: Optional[VpcInterfaceAttachment] = Field(
        None, alias='VpcInterfaceAttachment'
    )


class SetSourceRequest(BaseModel):
    Decryption: Optional[Encryption] = None
    Description: Optional[FieldString] = None
    EntitlementArn: Optional[FieldString] = None
    GatewayBridgeSource: Optional[SetGatewayBridgeSourceRequest] = None
    IngestPort: Optional[FieldInteger] = None
    MaxBitrate: Optional[FieldInteger] = None
    MaxLatency: Optional[FieldInteger] = None
    MaxSyncBuffer: Optional[FieldInteger] = None
    MediaStreamSourceConfigurations: Optional[
        FieldListOfMediaStreamSourceConfigurationRequest
    ] = None
    MinLatency: Optional[FieldInteger] = None
    Name: Optional[FieldString] = None
    Protocol_1: Optional[Protocol] = Field(None, alias='Protocol')
    SenderControlPort: Optional[FieldInteger] = None
    SenderIpAddress: Optional[FieldString] = None
    SourceListenerAddress: Optional[FieldString] = None
    SourceListenerPort: Optional[FieldInteger] = None
    StreamId: Optional[FieldString] = None
    VpcInterfaceName: Optional[FieldString] = None
    WhitelistCidr: Optional[FieldString] = None


class Source(BaseModel):
    DataTransferSubscriberFeePercent: Optional[FieldInteger] = None
    Decryption: Optional[Encryption] = None
    Description: Optional[FieldString] = None
    EntitlementArn: Optional[FieldString] = None
    GatewayBridgeSource_1: Optional[GatewayBridgeSource] = Field(
        None, alias='GatewayBridgeSource'
    )
    IngestIp: Optional[FieldString] = None
    IngestPort: Optional[FieldInteger] = None
    MediaStreamSourceConfigurations: Optional[
        FieldListOfMediaStreamSourceConfiguration
    ] = None
    Name: FieldString
    SenderControlPort: Optional[FieldInteger] = None
    SenderIpAddress: Optional[FieldString] = None
    SourceArn: FieldString
    Transport_1: Optional[Transport] = Field(None, alias='Transport')
    VpcInterfaceName: Optional[FieldString] = None
    WhitelistCidr: Optional[FieldString] = None


class UpdateFlowOutputRequest(BaseModel):
    CidrAllowList: Optional[FieldListOfString] = None
    Description: Optional[FieldString] = None
    Destination: Optional[FieldString] = None
    Encryption: Optional[UpdateEncryption] = None
    MaxLatency: Optional[FieldInteger] = None
    MediaStreamOutputConfigurations: Optional[
        FieldListOfMediaStreamOutputConfigurationRequest
    ] = None
    MinLatency: Optional[FieldInteger] = None
    Port: Optional[FieldInteger] = None
    Protocol_1: Optional[Protocol] = Field(None, alias='Protocol')
    RemoteId: Optional[FieldString] = None
    SenderControlPort: Optional[FieldInteger] = None
    SenderIpAddress: Optional[FieldString] = None
    SmoothingLatency: Optional[FieldInteger] = None
    StreamId: Optional[FieldString] = None
    VpcInterfaceAttachment_1: Optional[VpcInterfaceAttachment] = Field(
        None, alias='VpcInterfaceAttachment'
    )


class UpdateFlowOutputResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    Output_1: Optional[Output] = Field(None, alias='Output')


class UpdateFlowSourceRequest(BaseModel):
    Decryption: Optional[UpdateEncryption] = None
    Description: Optional[FieldString] = None
    EntitlementArn: Optional[FieldString] = None
    GatewayBridgeSource: Optional[UpdateGatewayBridgeSourceRequest] = None
    IngestPort: Optional[FieldInteger] = None
    MaxBitrate: Optional[FieldInteger] = None
    MaxLatency: Optional[FieldInteger] = None
    MaxSyncBuffer: Optional[FieldInteger] = None
    MediaStreamSourceConfigurations: Optional[
        FieldListOfMediaStreamSourceConfigurationRequest
    ] = None
    MinLatency: Optional[FieldInteger] = None
    Protocol_1: Optional[Protocol] = Field(None, alias='Protocol')
    SenderControlPort: Optional[FieldInteger] = None
    SenderIpAddress: Optional[FieldString] = None
    SourceListenerAddress: Optional[FieldString] = None
    SourceListenerPort: Optional[FieldInteger] = None
    StreamId: Optional[FieldString] = None
    VpcInterfaceName: Optional[FieldString] = None
    WhitelistCidr: Optional[FieldString] = None


class UpdateFlowSourceResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    Source_1: Optional[Source] = Field(None, alias='Source')


class FieldListOfAddOutputRequest(RootModel[List[AddOutputRequest]]):
    root: List[AddOutputRequest]


class FieldListOfOutput(RootModel[List[Output]]):
    root: List[Output]


class FieldListOfSetSourceRequest(RootModel[List[SetSourceRequest]]):
    root: List[SetSourceRequest]


class FieldListOfSource(RootModel[List[Source]]):
    root: List[Source]


class V1FlowsPostRequest(BaseModel):
    availabilityZone: Optional[str] = Field(
        None,
        description='The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.',
    )
    entitlements: Optional[List[GrantEntitlementRequest]] = Field(
        None, description='The entitlements that you want to grant on a flow.'
    )
    maintenance: Optional[Maintenance1] = Field(
        None, description='Create maintenance setting for a flow'
    )
    mediaStreams: Optional[List[AddMediaStreamRequest]] = Field(
        None,
        description='The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.',
    )
    name: str = Field(..., description='The name of the flow.')
    outputs: Optional[List[AddOutputRequest]] = Field(
        None, description='The outputs that you want to add to this flow.'
    )
    source: Optional[Source1] = Field(
        None, description='The settings for the source of the flow.'
    )
    sourceFailoverConfig: Optional[SourceFailoverConfig] = Field(
        None, description='The settings for source failover.'
    )
    sources: Optional[List[SetSourceRequest]] = Field(None, description='')
    vpcInterfaces: Optional[List[VpcInterfaceRequest]] = Field(
        None, description='The VPC interfaces you want on the flow.'
    )


class V1FlowsFlowArnOutputsPostRequest(BaseModel):
    outputs: List[AddOutputRequest] = Field(
        ..., description='A list of outputs that you want to add.'
    )


class V1FlowsFlowArnSourcePostRequest(BaseModel):
    sources: List[SetSourceRequest] = Field(
        ..., description='A list of sources that you want to add.'
    )


class AddFlowOutputsRequest(BaseModel):
    Outputs: FieldListOfAddOutputRequest


class AddFlowOutputsResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    Outputs: Optional[FieldListOfOutput] = None


class AddFlowSourcesRequest(BaseModel):
    Sources: FieldListOfSetSourceRequest


class AddFlowSourcesResponse(BaseModel):
    FlowArn: Optional[FieldString] = None
    Sources: Optional[FieldListOfSource] = None


class CreateFlowRequest(BaseModel):
    AvailabilityZone: Optional[FieldString] = None
    Entitlements: Optional[FieldListOfGrantEntitlementRequest] = None
    Maintenance: Optional[AddMaintenance] = None
    MediaStreams: Optional[FieldListOfAddMediaStreamRequest] = None
    Name: FieldString
    Outputs: Optional[FieldListOfAddOutputRequest] = None
    Source: Optional[SetSourceRequest] = None
    SourceFailoverConfig: Optional[FailoverConfig] = None
    Sources: Optional[FieldListOfSetSourceRequest] = None
    VpcInterfaces: Optional[FieldListOfVpcInterfaceRequest] = None


class Flow(BaseModel):
    AvailabilityZone: FieldString
    Description: Optional[FieldString] = None
    EgressIp: Optional[FieldString] = None
    Entitlements: FieldListOfEntitlement
    FlowArn: FieldString
    Maintenance_1: Optional[Maintenance] = Field(None, alias='Maintenance')
    MediaStreams: Optional[FieldListOfMediaStream] = None
    Name: FieldString
    Outputs: FieldListOfOutput
    Source_1: Source = Field(..., alias='Source')
    SourceFailoverConfig: Optional[FailoverConfig] = None
    Sources: Optional[FieldListOfSource] = None
    Status_1: Status = Field(..., alias='Status')
    VpcInterfaces: Optional[FieldListOfVpcInterface] = None


class UpdateFlowResponse(BaseModel):
    Flow_1: Optional[Flow] = Field(None, alias='Flow')


class CreateFlowResponse(BaseModel):
    Flow_1: Optional[Flow] = Field(None, alias='Flow')


class DescribeFlowResponse(BaseModel):
    Flow_1: Optional[Flow] = Field(None, alias='Flow')
    Messages_1: Optional[Messages] = Field(None, alias='Messages')
